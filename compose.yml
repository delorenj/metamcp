services:
  metamcp:
    build: .
    image: ghcr.io/delorenj/metamcp:latest
    container_name: metamcp
    restart: unless-stopped
    env_file: .env

    # Resource limits - Increased for MCP server stability
    mem_limit: 32g # More memory for MCP servers
    memswap_limit: 32g # Prevent swap usage
    cpus: "6.0" # More CPU for parallel MCP processing
    pids_limit: 10000 # Higher limit for MCP servers

    # Security
    security_opt:
      - no-new-privileges:true

    # Process limits - increased for MCP server workload
    ulimits:
      nproc:
        soft: 10000
        hard: 10000
      nofile:
        soft: 8192
        hard: 16384

    environment:
      # Database connection
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: 15434
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-metamcp}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:15434/${POSTGRES_DB:-metamcp}

      # Application URLs
      APP_URL: https://mcp.delo.sh
      NEXT_PUBLIC_APP_URL: https://mcp.delo.sh

      # Auth
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}

      # Optional OIDC
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID:-}
      OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET:-}
      OIDC_DISCOVERY_URL: ${OIDC_DISCOVERY_URL:-}

      # Docker networking
      TRANSFORM_LOCALHOST_TO_DOCKER_INTERNAL: true

      # Node settings for memory management
      NODE_OPTIONS: "--max-old-space-size=2048"
      UV_THREADPOOL_SIZE: 4

    # Add host.docker.internal for Linux
    extra_hosts:
      - "host.docker.internal:host-gateway"

    networks:
      - proxy

    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.metamcp.loadbalancer.server.port=12008"

      # Main frontend routes
      - "traefik.http.routers.metamcp.rule=Host(`mcp.delo.sh`)"
      - "traefik.http.routers.metamcp.entrypoints=websecure"
      - "traefik.http.routers.metamcp.tls.certresolver=letsencrypt"
      - "traefik.http.routers.metamcp.service=metamcp"
      - "traefik.http.routers.metamcp.priority=100"

      # SSE/MCP streaming routes (high priority)
      - "traefik.http.routers.metamcp-sse.rule=Host(`mcp.delo.sh`) && (PathPrefix(`/mcp-proxy/`) || PathPrefix(`/metamcp/`))"
      - "traefik.http.routers.metamcp-sse.entrypoints=websecure"
      - "traefik.http.routers.metamcp-sse.tls.certresolver=letsencrypt"
      - "traefik.http.routers.metamcp-sse.service=metamcp-sse"
      - "traefik.http.routers.metamcp-sse.priority=150"

      # SSE-optimized service
      - "traefik.http.services.metamcp-sse.loadbalancer.server.port=12008"
      - "traefik.http.services.metamcp-sse.loadbalancer.responseforwarding.flushinterval=1ms"

      # Middleware for CORS and headers
      - "traefik.http.middlewares.metamcp-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.metamcp-headers.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.metamcp-headers.headers.customresponseheaders.Access-Control-Allow-Methods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.metamcp-headers.headers.customresponseheaders.Access-Control-Allow-Headers=content-type,authorization,x-api-key,mcp-protocol-version,mcp-session-id"

      # Apply middleware
      - "traefik.http.routers.metamcp.middlewares=metamcp-headers"
      - "traefik.http.routers.metamcp-sse.middlewares=metamcp-headers"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    volumes:
      - metamcp-cache:/app/.cache
      - ./scripts:/scripts:ro

  # Process monitor - kills excessive npm exec processes
  # Temporarily disabled until Docker image issue is resolved
  # process-monitor:
  #   image: docker:alpine
  #   container_name: metamcp-process-monitor
  #   restart: unless-stopped
  #   command: ["/scripts/process-monitor.sh"]

  #   # Resource limits
  #   mem_limit: 128m
  #   cpus: "0.1"

  #   volumes:
  #     - ./scripts:/scripts:ro
  #     - /var/run/docker.sock:/var/run/docker.sock

  #   networks:
  #     - proxy

  #   depends_on:
  #     - metamcp

networks:
  proxy:
    external: true

  # Cognee MCP Server - AI Memory & Knowledge Graph
  cognee-mcp:
    build: ./cognee-mcp-docker
    container_name: cognee-mcp
    restart: unless-stopped
    env_file: .env

    # Resource limits
    mem_limit: 2g
    memswap_limit: 2g
    cpus: "1.0"
    pids_limit: 1000

    # Security
    security_opt:
      - no-new-privileges:true

    # Process limits
    ulimits:
      nproc:
        soft: 1000
        hard: 1000
      nofile:
        soft: 4096
        hard: 8192

    environment:
      # Transport configuration
      TRANSPORT_MODE: http
      COGNEE_HOST: 0.0.0.0
      COGNEE_PORT: 8000
      COGNEE_PATH: /mcp

      # LLM Provider (configurable via .env)
      COGNEE_LLM_PROVIDER: ${COGNEE_LLM_PROVIDER:-openai}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}

      # Database connection (optional, for persistent storage)
      COGNEE_DATABASE_URL: ${COGNEE_DATABASE_URL:-}

      # Cognee configuration
      COGNEE_MEMORY_BACKEND: ${COGNEE_MEMORY_BACKEND:-local}

    # Add host.docker.internal for database connectivity
    extra_hosts:
      - "host.docker.internal:host-gateway"

    networks:
      - proxy

    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.cognee-mcp.loadbalancer.server.port=8000"

      # Cognee MCP streaming routes
      - "traefik.http.routers.cognee-mcp.rule=Host(`mcp.delo.sh`) && PathPrefix(`/cognee/`)"
      - "traefik.http.routers.cognee-mcp.entrypoints=websecure"
      - "traefik.http.routers.cognee-mcp.tls.certresolver=letsencrypt"
      - "traefik.http.routers.cognee-mcp.service=cognee-mcp"
      - "traefik.http.routers.cognee-mcp.priority=140"

      # Streaming-optimized service
      - "traefik.http.services.cognee-mcp-stream.loadbalancer.server.port=8000"
      - "traefik.http.services.cognee-mcp-stream.loadbalancer.responseforwarding.flushinterval=1ms"

      # Middleware for CORS and headers
      - "traefik.http.middlewares.cognee-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.cognee-headers.headers.customresponseheaders.Access-Control-Allow-Origin=*"
      - "traefik.http.middlewares.cognee-headers.headers.customresponseheaders.Access-Control-Allow-Methods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cognee-headers.headers.customresponseheaders.Access-Control-Allow-Headers=content-type,authorization,x-api-key,mcp-protocol-version,mcp-session-id"

      # Apply middleware
      - "traefik.http.routers.cognee-mcp.middlewares=cognee-headers"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    volumes:
      - cognee-data:/app/data

volumes:
  metamcp-cache:
    driver: local
  cognee-data:
    driver: local
